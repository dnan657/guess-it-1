#!/bin/bash

# Path to the student's solution script
STUDENT_SCRIPT="./student/script.sh"

# Path to the data file comes from the first argument
if [ -z "$1" ]; then
  echo "Usage: $0 <path_to_data_file>"
  exit 1
fi
DATA_FILE=$1

# Check if the student script is executable
if [ ! -x "$STUDENT_SCRIPT" ]; then
  echo "Error: Student script not found or not executable."
  exit 1
fi

# Check if the data file exists
if [ ! -f "$DATA_FILE" ]; then
  echo "Error: Data file not found: $DATA_FILE"
  exit 1
fi

# Read the data into an array
mapfile -t values < "$DATA_FILE"
num_values=${#values[@]}

# Initialize variables
total_score="0"
correct_guesses=0

# Run the student's script using a coprocess
coproc student_process { "$STUDENT_SCRIPT"; }

# Feed the first number to the student's script
echo "${values[0]}" >&${student_process[1]}

# The loop will start from the second value to check the first prediction
for (( i=1; i<num_values; i++ )); do
  # Read the prediction for the current value.
  # This prediction was generated by the student script after it received the *previous* value.
  if ! read -t 5 -r student_range <&${student_process[0]}; then
      echo "Error: Timed out waiting for student script output."
      break
  fi
  
  current_value=${values[$i]}

  # Validate the student's output format
  if [[ ! "$student_range" =~ ^-?[0-9]+[[:space:]]+-?[0-9]+$ ]]; then
    echo "---"
    echo "Error: Invalid output format from student script on line $i: '$student_range'"
  else
    bet_low=$(echo "$student_range" | awk '{print $1}')
    bet_high=$(echo "$student_range" | awk '{print $2}')

    # Check if the guess is correct
    is_correct=$(awk -v val="$current_value" -v low="$bet_low" -v high="$bet_high" 'BEGIN { print (val >= low && val <= high) ? 1 : 0 }')

    if [ "$is_correct" -eq 1 ]; then
      correct_guesses=$((correct_guesses + 1))
      # Calculate score: 100 - (upper - lower)
      score=$(awk "BEGIN {print 100 - ($bet_high - $bet_low)}")
      # Use awk for floating point arithmetic for total_score
      total_score=$(awk "BEGIN {print $total_score + $score}")
    fi
  fi

  # Feed the current value to get the prediction for the NEXT value, if it's not the last one
  if [ $i -lt $((num_values - 1)) ]; then
    echo "$current_value" >&${student_process[1]}
  fi
done

# Close the coprocess pipes
exec {student_process[1]}>&-
exec {student_process[0]}>&-

# Final score calculation
if [ "$correct_guesses" -gt 0 ]; then
  # Use awk for floating point division
  avg_score=$(awk "BEGIN {print $total_score / $correct_guesses}")
  echo "---"
  echo "Total Correct Guesses: $correct_guesses / $((num_values - 1))"
  echo "Total Score: $total_score"
  echo "Final Average Score: $avg_score"
else
  echo "---"
  echo "Total Correct Guesses: 0 / $((num_values - 1))"
  echo "Total Score: 0"
  echo "Final Average Score: 0"
fi
